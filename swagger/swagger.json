{
    "swagger": "2.0",
    "info": {
        "title": "beego Test API",
        "description": "beego has a very cool tools to autogenerate documents for your API",
        "version": "1.0.0",
        "termsOfService": "http://beego.me/",
        "contact": {
            "email": "astaxie@gmail.com"
        },
        "license": {
            "name": "Apache 2.0",
            "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
        }
    },
    "basePath": "/api/v2/kg",
    "paths": {
        "/facilities_display/": {
            "get": {
                "tags": [
                    "facilities_display"
                ],
                "description": "get FacilitiesDisplay",
                "operationId": "FacilitiesDisplayController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.FacilitiesDisplay"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "facilities_display"
                ],
                "description": "create FacilitiesDisplay",
                "operationId": "FacilitiesDisplayController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for FacilitiesDisplay content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.FacilitiesDisplay"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.FacilitiesDisplay"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/facilities_display/{id}": {
            "get": {
                "tags": [
                    "facilities_display"
                ],
                "description": "get FacilitiesDisplay by id",
                "operationId": "FacilitiesDisplayController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.FacilitiesDisplay"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "facilities_display"
                ],
                "description": "update the FacilitiesDisplay",
                "operationId": "FacilitiesDisplayController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for FacilitiesDisplay content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.FacilitiesDisplay"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.FacilitiesDisplay"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "facilities_display"
                ],
                "description": "delete the FacilitiesDisplay",
                "operationId": "FacilitiesDisplayController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/grade/": {
            "get": {
                "tags": [
                    "grade"
                ],
                "description": "get Grade",
                "operationId": "GradeController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Grade"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "grade"
                ],
                "description": "create Grade",
                "operationId": "GradeController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Grade content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Grade"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.Grade"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/grade/{id}": {
            "get": {
                "tags": [
                    "grade"
                ],
                "description": "get Grade by id",
                "operationId": "GradeController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Grade"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "grade"
                ],
                "description": "update the Grade",
                "operationId": "GradeController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Grade content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Grade"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Grade"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "grade"
                ],
                "description": "delete the Grade",
                "operationId": "GradeController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/group_view/": {
            "get": {
                "tags": [
                    "group_view"
                ],
                "description": "get GroupView",
                "operationId": "GroupViewController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.GroupView"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "group_view"
                ],
                "description": "create GroupView",
                "operationId": "GroupViewController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for GroupView content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.GroupView"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.GroupView"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/group_view/{id}": {
            "get": {
                "tags": [
                    "group_view"
                ],
                "description": "get GroupView by id",
                "operationId": "GroupViewController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.GroupView"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "group_view"
                ],
                "description": "update the GroupView",
                "operationId": "GroupViewController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for GroupView content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.GroupView"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.GroupView"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "group_view"
                ],
                "description": "delete the GroupView",
                "operationId": "GroupViewController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/kindergarten/": {
            "get": {
                "tags": [
                    "kindergarten"
                ],
                "description": "get Kindergarten",
                "operationId": "KindergartenController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Kindergarten"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "kindergarten"
                ],
                "description": "create Kindergarten",
                "operationId": "KindergartenController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Kindergarten content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Kindergarten"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.Kindergarten"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/kindergarten/{id}": {
            "get": {
                "tags": [
                    "kindergarten"
                ],
                "description": "get Kindergarten by id",
                "operationId": "KindergartenController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Kindergarten"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "kindergarten"
                ],
                "description": "update the Kindergarten",
                "operationId": "KindergartenController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Kindergarten content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Kindergarten"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Kindergarten"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "kindergarten"
                ],
                "description": "delete the Kindergarten",
                "operationId": "KindergartenController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/kindergarten_courseware/": {
            "get": {
                "tags": [
                    "kindergarten_courseware"
                ],
                "description": "get KindergartenCourseware",
                "operationId": "KindergartenCoursewareController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.KindergartenCourseware"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "kindergarten_courseware"
                ],
                "description": "create KindergartenCourseware",
                "operationId": "KindergartenCoursewareController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for KindergartenCourseware content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.KindergartenCourseware"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.KindergartenCourseware"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/kindergarten_courseware/{id}": {
            "get": {
                "tags": [
                    "kindergarten_courseware"
                ],
                "description": "get KindergartenCourseware by id",
                "operationId": "KindergartenCoursewareController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.KindergartenCourseware"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "kindergarten_courseware"
                ],
                "description": "update the KindergartenCourseware",
                "operationId": "KindergartenCoursewareController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for KindergartenCourseware content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.KindergartenCourseware"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.KindergartenCourseware"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "kindergarten_courseware"
                ],
                "description": "delete the KindergartenCourseware",
                "operationId": "KindergartenCoursewareController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/kindergarten_folder/": {
            "get": {
                "tags": [
                    "kindergarten_folder"
                ],
                "description": "get KindergartenFolder",
                "operationId": "KindergartenFolderController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.KindergartenFolder"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "kindergarten_folder"
                ],
                "description": "create KindergartenFolder",
                "operationId": "KindergartenFolderController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for KindergartenFolder content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.KindergartenFolder"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.KindergartenFolder"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/kindergarten_folder/{id}": {
            "get": {
                "tags": [
                    "kindergarten_folder"
                ],
                "description": "get KindergartenFolder by id",
                "operationId": "KindergartenFolderController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.KindergartenFolder"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "kindergarten_folder"
                ],
                "description": "update the KindergartenFolder",
                "operationId": "KindergartenFolderController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for KindergartenFolder content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.KindergartenFolder"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.KindergartenFolder"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "kindergarten_folder"
                ],
                "description": "delete the KindergartenFolder",
                "operationId": "KindergartenFolderController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/kindergarten_life/": {
            "get": {
                "tags": [
                    "kindergarten_life"
                ],
                "description": "get KindergartenLife",
                "operationId": "KindergartenLifeController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.KindergartenLife"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "kindergarten_life"
                ],
                "description": "create KindergartenLife",
                "operationId": "KindergartenLifeController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for KindergartenLife content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.KindergartenLife"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.KindergartenLife"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/kindergarten_life/{id}": {
            "get": {
                "tags": [
                    "kindergarten_life"
                ],
                "description": "get KindergartenLife by id",
                "operationId": "KindergartenLifeController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.KindergartenLife"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "kindergarten_life"
                ],
                "description": "update the KindergartenLife",
                "operationId": "KindergartenLifeController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for KindergartenLife content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.KindergartenLife"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.KindergartenLife"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "kindergarten_life"
                ],
                "description": "delete the KindergartenLife",
                "operationId": "KindergartenLifeController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/kinship/": {
            "get": {
                "tags": [
                    "kinship"
                ],
                "description": "get Kinship",
                "operationId": "KinshipController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Kinship"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "kinship"
                ],
                "description": "create Kinship",
                "operationId": "KinshipController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Kinship content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Kinship"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.Kinship"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/kinship/{id}": {
            "get": {
                "tags": [
                    "kinship"
                ],
                "description": "get Kinship by id",
                "operationId": "KinshipController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Kinship"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "kinship"
                ],
                "description": "update the Kinship",
                "operationId": "KinshipController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Kinship content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Kinship"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Kinship"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "kinship"
                ],
                "description": "delete the Kinship",
                "operationId": "KinshipController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/life_picture/": {
            "get": {
                "tags": [
                    "life_picture"
                ],
                "description": "get LifePicture",
                "operationId": "LifePictureController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.LifePicture"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "life_picture"
                ],
                "description": "create LifePicture",
                "operationId": "LifePictureController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for LifePicture content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.LifePicture"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.LifePicture"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/life_picture/{id}": {
            "get": {
                "tags": [
                    "life_picture"
                ],
                "description": "get LifePicture by id",
                "operationId": "LifePictureController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.LifePicture"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "life_picture"
                ],
                "description": "update the LifePicture",
                "operationId": "LifePictureController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for LifePicture content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.LifePicture"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.LifePicture"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "life_picture"
                ],
                "description": "delete the LifePicture",
                "operationId": "LifePictureController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/member/": {
            "get": {
                "tags": [
                    "member"
                ],
                "description": "get Member",
                "operationId": "MemberController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Member"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "member"
                ],
                "description": "create Member",
                "operationId": "MemberController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Member content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Member"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.Member"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/member/{id}": {
            "get": {
                "tags": [
                    "member"
                ],
                "description": "get Member by id",
                "operationId": "MemberController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Member"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "member"
                ],
                "description": "update the Member",
                "operationId": "MemberController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Member content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Member"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Member"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "member"
                ],
                "description": "delete the Member",
                "operationId": "MemberController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/migrations/": {
            "get": {
                "tags": [
                    "migrations"
                ],
                "description": "get Migrations",
                "operationId": "MigrationsController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Migrations"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "migrations"
                ],
                "description": "create Migrations",
                "operationId": "MigrationsController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Migrations content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Migrations"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.Migrations"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/migrations/{id}": {
            "get": {
                "tags": [
                    "migrations"
                ],
                "description": "get Migrations by id",
                "operationId": "MigrationsController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Migrations"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "migrations"
                ],
                "description": "update the Migrations",
                "operationId": "MigrationsController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Migrations content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Migrations"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Migrations"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "migrations"
                ],
                "description": "delete the Migrations",
                "operationId": "MigrationsController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/notice/": {
            "get": {
                "tags": [
                    "notice"
                ],
                "description": "get Notice",
                "operationId": "NoticeController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Notice"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "notice"
                ],
                "description": "create Notice",
                "operationId": "NoticeController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Notice content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Notice"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.Notice"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/notice/{id}": {
            "get": {
                "tags": [
                    "notice"
                ],
                "description": "get Notice by id",
                "operationId": "NoticeController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Notice"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "notice"
                ],
                "description": "update the Notice",
                "operationId": "NoticeController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Notice content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Notice"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Notice"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "notice"
                ],
                "description": "delete the Notice",
                "operationId": "NoticeController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/organizational/": {
            "get": {
                "tags": [
                    "organizational"
                ],
                "description": "get Organizational",
                "operationId": "OrganizationalController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Organizational"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "organizational"
                ],
                "description": "create Organizational",
                "operationId": "OrganizationalController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Organizational content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Organizational"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.Organizational"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/organizational/{id}": {
            "get": {
                "tags": [
                    "organizational"
                ],
                "description": "get Organizational by id",
                "operationId": "OrganizationalController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Organizational"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "organizational"
                ],
                "description": "update the Organizational",
                "operationId": "OrganizationalController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Organizational content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Organizational"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Organizational"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "organizational"
                ],
                "description": "delete the Organizational",
                "operationId": "OrganizationalController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/organizational_member/": {
            "get": {
                "tags": [
                    "organizational_member"
                ],
                "description": "get OrganizationalMember",
                "operationId": "OrganizationalMemberController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.OrganizationalMember"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "organizational_member"
                ],
                "description": "create OrganizationalMember",
                "operationId": "OrganizationalMemberController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for OrganizationalMember content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.OrganizationalMember"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.OrganizationalMember"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/organizational_member/{id}": {
            "get": {
                "tags": [
                    "organizational_member"
                ],
                "description": "get OrganizationalMember by id",
                "operationId": "OrganizationalMemberController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.OrganizationalMember"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "organizational_member"
                ],
                "description": "update the OrganizationalMember",
                "operationId": "OrganizationalMemberController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for OrganizationalMember content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.OrganizationalMember"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.OrganizationalMember"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "organizational_member"
                ],
                "description": "delete the OrganizationalMember",
                "operationId": "OrganizationalMemberController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/permission/": {
            "get": {
                "tags": [
                    "permission"
                ],
                "description": "get Permission",
                "operationId": "PermissionController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Permission"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "permission"
                ],
                "description": "create Permission",
                "operationId": "PermissionController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Permission content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Permission"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.Permission"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/permission/{id}": {
            "get": {
                "tags": [
                    "permission"
                ],
                "description": "get Permission by id",
                "operationId": "PermissionController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Permission"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "permission"
                ],
                "description": "update the Permission",
                "operationId": "PermissionController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Permission content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Permission"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Permission"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "permission"
                ],
                "description": "delete the Permission",
                "operationId": "PermissionController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/permission_route/": {
            "get": {
                "tags": [
                    "permission_route"
                ],
                "description": "get PermissionRoute",
                "operationId": "PermissionRouteController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.PermissionRoute"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "permission_route"
                ],
                "description": "create PermissionRoute",
                "operationId": "PermissionRouteController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for PermissionRoute content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.PermissionRoute"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.PermissionRoute"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/permission_route/{id}": {
            "get": {
                "tags": [
                    "permission_route"
                ],
                "description": "get PermissionRoute by id",
                "operationId": "PermissionRouteController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.PermissionRoute"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "permission_route"
                ],
                "description": "update the PermissionRoute",
                "operationId": "PermissionRouteController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for PermissionRoute content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.PermissionRoute"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.PermissionRoute"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "permission_route"
                ],
                "description": "delete the PermissionRoute",
                "operationId": "PermissionRouteController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/role/": {
            "get": {
                "tags": [
                    "role"
                ],
                "description": "get Role",
                "operationId": "RoleController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Role"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "role"
                ],
                "description": "create Role",
                "operationId": "RoleController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Role content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Role"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.Role"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/role/{id}": {
            "get": {
                "tags": [
                    "role"
                ],
                "description": "get Role by id",
                "operationId": "RoleController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Role"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "role"
                ],
                "description": "update the Role",
                "operationId": "RoleController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Role content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Role"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Role"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "role"
                ],
                "description": "delete the Role",
                "operationId": "RoleController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/role_permission/": {
            "get": {
                "tags": [
                    "role_permission"
                ],
                "description": "get RolePermission",
                "operationId": "RolePermissionController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.RolePermission"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "role_permission"
                ],
                "description": "create RolePermission",
                "operationId": "RolePermissionController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for RolePermission content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RolePermission"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.RolePermission"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/role_permission/{id}": {
            "get": {
                "tags": [
                    "role_permission"
                ],
                "description": "get RolePermission by id",
                "operationId": "RolePermissionController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.RolePermission"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "role_permission"
                ],
                "description": "update the RolePermission",
                "operationId": "RolePermissionController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for RolePermission content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.RolePermission"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.RolePermission"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "role_permission"
                ],
                "description": "delete the RolePermission",
                "operationId": "RolePermissionController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/route/": {
            "get": {
                "tags": [
                    "route"
                ],
                "description": "get Route",
                "operationId": "RouteController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Route"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "route"
                ],
                "description": "create Route",
                "operationId": "RouteController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Route content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Route"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.Route"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/route/{id}": {
            "get": {
                "tags": [
                    "route"
                ],
                "description": "get Route by id",
                "operationId": "RouteController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Route"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "route"
                ],
                "description": "update the Route",
                "operationId": "RouteController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Route content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Route"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Route"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "route"
                ],
                "description": "delete the Route",
                "operationId": "RouteController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/slide_show/": {
            "get": {
                "tags": [
                    "slide_show"
                ],
                "description": "get SlideShow",
                "operationId": "SlideShowController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.SlideShow"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "slide_show"
                ],
                "description": "create SlideShow",
                "operationId": "SlideShowController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for SlideShow content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.SlideShow"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.SlideShow"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/slide_show/{id}": {
            "get": {
                "tags": [
                    "slide_show"
                ],
                "description": "get SlideShow by id",
                "operationId": "SlideShowController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.SlideShow"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "slide_show"
                ],
                "description": "update the SlideShow",
                "operationId": "SlideShowController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for SlideShow content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.SlideShow"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.SlideShow"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "slide_show"
                ],
                "description": "delete the SlideShow",
                "operationId": "SlideShowController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/student/": {
            "get": {
                "tags": [
                    "student"
                ],
                "description": "get Student",
                "operationId": "StudentController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Student"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "student"
                ],
                "description": "create Student",
                "operationId": "StudentController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Student content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Student"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.Student"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/student/{id}": {
            "get": {
                "tags": [
                    "student"
                ],
                "description": "get Student by id",
                "operationId": "StudentController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Student"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "student"
                ],
                "description": "update the Student",
                "operationId": "StudentController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Student content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Student"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Student"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "student"
                ],
                "description": "delete the Student",
                "operationId": "StudentController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/student_ examination/": {
            "get": {
                "tags": [
                    "student_ examination"
                ],
                "description": "get StudentExamination",
                "operationId": "StudentExaminationController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.StudentExamination"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "student_ examination"
                ],
                "description": "create StudentExamination",
                "operationId": "StudentExaminationController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for StudentExamination content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.StudentExamination"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.StudentExamination"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/student_ examination/{id}": {
            "get": {
                "tags": [
                    "student_ examination"
                ],
                "description": "get StudentExamination by id",
                "operationId": "StudentExaminationController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.StudentExamination"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "student_ examination"
                ],
                "description": "update the StudentExamination",
                "operationId": "StudentExaminationController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for StudentExamination content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.StudentExamination"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.StudentExamination"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "student_ examination"
                ],
                "description": "delete the StudentExamination",
                "operationId": "StudentExaminationController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/student_kindergarten/": {
            "get": {
                "tags": [
                    "student_kindergarten"
                ],
                "description": "get StudentKindergarten",
                "operationId": "StudentKindergartenController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.StudentKindergarten"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "student_kindergarten"
                ],
                "description": "create StudentKindergarten",
                "operationId": "StudentKindergartenController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for StudentKindergarten content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.StudentKindergarten"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.StudentKindergarten"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/student_kindergarten/{id}": {
            "get": {
                "tags": [
                    "student_kindergarten"
                ],
                "description": "get StudentKindergarten by id",
                "operationId": "StudentKindergartenController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.StudentKindergarten"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "student_kindergarten"
                ],
                "description": "update the StudentKindergarten",
                "operationId": "StudentKindergartenController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for StudentKindergarten content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.StudentKindergarten"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.StudentKindergarten"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "student_kindergarten"
                ],
                "description": "delete the StudentKindergarten",
                "operationId": "StudentKindergartenController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/teacher/": {
            "get": {
                "tags": [
                    "teacher"
                ],
                "description": "get Teacher",
                "operationId": "TeacherController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Teacher"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "teacher"
                ],
                "description": "create Teacher",
                "operationId": "TeacherController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Teacher content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Teacher"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.Teacher"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/teacher/{id}": {
            "get": {
                "tags": [
                    "teacher"
                ],
                "description": "get Teacher by id",
                "operationId": "TeacherController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Teacher"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "teacher"
                ],
                "description": "update the Teacher",
                "operationId": "TeacherController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for Teacher content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.Teacher"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.Teacher"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "teacher"
                ],
                "description": "delete the Teacher",
                "operationId": "TeacherController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/teacher_title/": {
            "get": {
                "tags": [
                    "teacher_title"
                ],
                "description": "get TeacherTitle",
                "operationId": "TeacherTitleController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.TeacherTitle"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "teacher_title"
                ],
                "description": "create TeacherTitle",
                "operationId": "TeacherTitleController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for TeacherTitle content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.TeacherTitle"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.TeacherTitle"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/teacher_title/{id}": {
            "get": {
                "tags": [
                    "teacher_title"
                ],
                "description": "get TeacherTitle by id",
                "operationId": "TeacherTitleController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.TeacherTitle"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "teacher_title"
                ],
                "description": "update the TeacherTitle",
                "operationId": "TeacherTitleController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for TeacherTitle content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.TeacherTitle"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.TeacherTitle"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "teacher_title"
                ],
                "description": "delete the TeacherTitle",
                "operationId": "TeacherTitleController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/teachers_show/": {
            "get": {
                "tags": [
                    "teachers_show"
                ],
                "description": "get TeachersShow",
                "operationId": "TeachersShowController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.TeachersShow"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "teachers_show"
                ],
                "description": "create TeachersShow",
                "operationId": "TeachersShowController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for TeachersShow content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.TeachersShow"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.TeachersShow"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/teachers_show/{id}": {
            "get": {
                "tags": [
                    "teachers_show"
                ],
                "description": "get TeachersShow by id",
                "operationId": "TeachersShowController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.TeachersShow"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "teachers_show"
                ],
                "description": "update the TeachersShow",
                "operationId": "TeachersShowController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for TeachersShow content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.TeachersShow"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.TeachersShow"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "teachers_show"
                ],
                "description": "delete the TeachersShow",
                "operationId": "TeachersShowController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/user_permission/": {
            "get": {
                "tags": [
                    "user_permission"
                ],
                "description": "get UserPermission",
                "operationId": "UserPermissionController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.UserPermission"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "user_permission"
                ],
                "description": "create UserPermission",
                "operationId": "UserPermissionController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for UserPermission content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserPermission"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.UserPermission"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/user_permission/{id}": {
            "get": {
                "tags": [
                    "user_permission"
                ],
                "description": "get UserPermission by id",
                "operationId": "UserPermissionController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.UserPermission"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "user_permission"
                ],
                "description": "update the UserPermission",
                "operationId": "UserPermissionController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for UserPermission content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserPermission"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.UserPermission"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "user_permission"
                ],
                "description": "delete the UserPermission",
                "operationId": "UserPermissionController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        },
        "/user_role/": {
            "get": {
                "tags": [
                    "user_role"
                ],
                "description": "get UserRole",
                "operationId": "UserRoleController.Get All",
                "parameters": [
                    {
                        "in": "query",
                        "name": "query",
                        "description": "Filter. e.g. col1:v1,col2:v2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "fields",
                        "description": "Fields returned. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "sortby",
                        "description": "Sorted-by fields. e.g. col1,col2 ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "order",
                        "description": "Order corresponding to each sortby field, if single value, apply to all sortby fields. e.g. desc,asc ...",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "limit",
                        "description": "Limit the size of result set. Must be an integer",
                        "type": "string"
                    },
                    {
                        "in": "query",
                        "name": "offset",
                        "description": "Start position of result set. Must be an integer",
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.UserRole"
                        }
                    },
                    "403": {
                        "description": ""
                    }
                }
            },
            "post": {
                "tags": [
                    "user_role"
                ],
                "description": "create UserRole",
                "operationId": "UserRoleController.Post",
                "parameters": [
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for UserRole content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserRole"
                        }
                    }
                ],
                "responses": {
                    "201": {
                        "description": "{int} models.UserRole"
                    },
                    "403": {
                        "description": "body is empty"
                    }
                }
            }
        },
        "/user_role/{id}": {
            "get": {
                "tags": [
                    "user_role"
                ],
                "description": "get UserRole by id",
                "operationId": "UserRoleController.Get One",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The key for staticblock",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.UserRole"
                        }
                    },
                    "403": {
                        "description": ":id is empty"
                    }
                }
            },
            "put": {
                "tags": [
                    "user_role"
                ],
                "description": "update the UserRole",
                "operationId": "UserRoleController.Put",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to update",
                        "required": true,
                        "type": "string"
                    },
                    {
                        "in": "body",
                        "name": "body",
                        "description": "body for UserRole content",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/models.UserRole"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "",
                        "schema": {
                            "$ref": "#/definitions/models.UserRole"
                        }
                    },
                    "403": {
                        "description": ":id is not int"
                    }
                }
            },
            "delete": {
                "tags": [
                    "user_role"
                ],
                "description": "delete the UserRole",
                "operationId": "UserRoleController.Delete",
                "parameters": [
                    {
                        "in": "path",
                        "name": "id",
                        "description": "The id you want to delete",
                        "required": true,
                        "type": "string"
                    }
                ],
                "responses": {
                    "200": {
                        "description": "{string} delete success!"
                    },
                    "403": {
                        "description": "id is empty"
                    }
                }
            }
        }
    },
    "definitions": {
        "models.FacilitiesDisplay": {
            "title": "FacilitiesDisplay",
            "type": "object",
            "properties": {
                "CreatedAt": {
                    "type": "string",
                    "format": "string"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "KindergartenId": {
                    "description": "幼儿园ID",
                    "type": "integer",
                    "format": "int64"
                },
                "Order": {
                    "description": "排序",
                    "type": "integer",
                    "format": "int64"
                },
                "Picture": {
                    "description": "图片",
                    "type": "string"
                },
                "UpdatedAt": {
                    "type": "string",
                    "format": "string"
                }
            }
        },
        "models.Grade": {
            "title": "Grade",
            "type": "object",
            "properties": {
                "CreatedAt": {
                    "type": "string",
                    "format": "string"
                },
                "Id": {
                    "description": "编号",
                    "type": "integer",
                    "format": "int64"
                },
                "KindergartenId": {
                    "description": "幼儿园编号",
                    "type": "integer",
                    "format": "int64"
                },
                "Name": {
                    "description": "年级名称",
                    "type": "string"
                },
                "Status": {
                    "description": "状态：0:正常，1:删除",
                    "type": "integer",
                    "format": "int32"
                },
                "TenantId": {
                    "description": "租户",
                    "type": "integer",
                    "format": "int64"
                },
                "UpdatedAt": {
                    "type": "string",
                    "format": "string"
                }
            }
        },
        "models.GroupView": {
            "title": "GroupView",
            "type": "object",
            "properties": {
                "ClassType": {
                    "type": "integer",
                    "format": "int32"
                },
                "CreatedAt": {
                    "type": "string",
                    "format": "string"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "UserId": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "models.Kindergarten": {
            "title": "Kindergarten",
            "type": "object",
            "properties": {
                "Address": {
                    "description": "地址",
                    "type": "string"
                },
                "CreatedAt": {
                    "type": "string",
                    "format": "string"
                },
                "DeletedAt": {
                    "type": "string",
                    "format": "string"
                },
                "Id": {
                    "description": "编号",
                    "type": "integer",
                    "format": "int64"
                },
                "Introduce": {
                    "description": "幼儿园介绍",
                    "type": "string"
                },
                "IntroducePicture": {
                    "description": "幼儿园介绍图",
                    "type": "string"
                },
                "KinderChildNo": {
                    "description": "分校数",
                    "type": "integer",
                    "format": "int64"
                },
                "KinderGrade": {
                    "description": "幼儿园级别",
                    "type": "string"
                },
                "LicenseNo": {
                    "description": "执照号",
                    "type": "integer",
                    "format": "int64"
                },
                "Name": {
                    "description": "幼儿园名称",
                    "type": "string"
                },
                "Status": {
                    "description": "状态：0:正常，1:删除",
                    "type": "integer",
                    "format": "int32"
                },
                "TenantId": {
                    "description": "租户，企业编号",
                    "type": "integer",
                    "format": "int64"
                },
                "UpdatedAt": {
                    "type": "string",
                    "format": "string"
                }
            }
        },
        "models.KindergartenCourseware": {
            "title": "KindergartenCourseware",
            "type": "object",
            "properties": {
                "CoursewareId": {
                    "description": "课件编号",
                    "type": "integer",
                    "format": "int64"
                },
                "CreatedAt": {
                    "type": "string",
                    "format": "string"
                },
                "Id": {
                    "description": "幼儿园文件夹编号",
                    "type": "integer",
                    "format": "int64"
                },
                "KindergartenFolderId": {
                    "description": "幼儿园课件文件夹编号",
                    "type": "integer",
                    "format": "int64"
                },
                "KindergartenId": {
                    "description": "幼儿园编号",
                    "type": "integer",
                    "format": "int64"
                },
                "Status": {
                    "type": "integer",
                    "format": "int32"
                },
                "TenantId": {
                    "description": "租户ID",
                    "type": "integer",
                    "format": "int64"
                },
                "UpdatedAt": {
                    "type": "string",
                    "format": "string"
                }
            }
        },
        "models.KindergartenFolder": {
            "title": "KindergartenFolder",
            "type": "object",
            "properties": {
                "CreatedAt": {
                    "type": "string",
                    "format": "string"
                },
                "FolderId": {
                    "description": "文件夹ID",
                    "type": "integer",
                    "format": "int64"
                },
                "FolderName": {
                    "description": "目录名称",
                    "type": "string"
                },
                "Id": {
                    "description": "幼儿园文件夹编号",
                    "type": "integer",
                    "format": "int64"
                },
                "KindergartenId": {
                    "description": "幼儿园编号",
                    "type": "integer",
                    "format": "int64"
                },
                "Status": {
                    "description": "状态,0正常,1删除",
                    "type": "integer",
                    "format": "int32"
                },
                "Type": {
                    "description": "类型，1上传，2小班，3中班，4大班，5分享中心",
                    "type": "integer",
                    "format": "int32"
                },
                "UpdatedAt": {
                    "type": "string",
                    "format": "string"
                }
            }
        },
        "models.KindergartenLife": {
            "title": "KindergartenLife",
            "type": "object",
            "properties": {
                "Content": {
                    "description": "内容",
                    "type": "string"
                },
                "CreatedAt": {
                    "type": "string",
                    "format": "string"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "KindergartenId": {
                    "type": "integer",
                    "format": "int64"
                },
                "Template": {
                    "description": "模板",
                    "type": "integer",
                    "format": "int32"
                },
                "UpdatedAt": {
                    "type": "string",
                    "format": "string"
                }
            }
        },
        "models.Kinship": {
            "title": "Kinship",
            "type": "object",
            "properties": {
                "ContactInformation": {
                    "description": "联系方式",
                    "type": "string"
                },
                "CreatedAt": {
                    "type": "string",
                    "format": "string"
                },
                "Id": {
                    "description": "编号",
                    "type": "integer",
                    "format": "int64"
                },
                "Name": {
                    "description": "名字",
                    "type": "string"
                },
                "Relation": {
                    "description": "关系",
                    "type": "string"
                },
                "StudentId": {
                    "description": "学生序号",
                    "type": "integer",
                    "format": "int64"
                },
                "Type": {
                    "description": "类型，1紧急联系人，2监护人",
                    "type": "integer",
                    "format": "int32"
                },
                "UnitName": {
                    "description": "单位名称",
                    "type": "string"
                },
                "UpdatedAt": {
                    "type": "string",
                    "format": "string"
                },
                "UserId": {
                    "description": "用户ID",
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "models.LifePicture": {
            "title": "LifePicture",
            "type": "object",
            "properties": {
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "LifeId": {
                    "description": "园内生活ID",
                    "type": "integer",
                    "format": "int64"
                },
                "Number": {
                    "description": "编号",
                    "type": "integer",
                    "format": "int32"
                },
                "Picture": {
                    "description": "图片地址",
                    "type": "string"
                }
            }
        },
        "models.Member": {
            "title": "Member",
            "type": "object",
            "properties": {
                "Address": {
                    "description": "地址",
                    "type": "string"
                },
                "Age": {
                    "description": "年龄",
                    "type": "integer",
                    "format": "int32"
                },
                "Avatar": {
                    "description": "头像",
                    "type": "string"
                },
                "ClassInfo": {
                    "description": "班级信息",
                    "type": "string"
                },
                "CreatedAt": {
                    "type": "string",
                    "format": "string"
                },
                "DeletedAt": {
                    "type": "string",
                    "format": "string"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "IdNumber": {
                    "description": "身份证",
                    "type": "string"
                },
                "KindergartenId": {
                    "description": "幼儿园ID",
                    "type": "integer",
                    "format": "int64"
                },
                "Name": {
                    "description": "姓名",
                    "type": "string"
                },
                "NationOrReligion": {
                    "description": "民族或宗教",
                    "type": "string"
                },
                "NativePlace": {
                    "description": "籍贯",
                    "type": "string"
                },
                "Number": {
                    "description": "编号",
                    "type": "string"
                },
                "Phone": {
                    "description": "手机",
                    "type": "string"
                },
                "Sex": {
                    "description": "性别：0男，1女",
                    "type": "integer",
                    "format": "int32"
                },
                "Status": {
                    "description": "状态 0未分班 1已分班 2离园",
                    "type": "integer",
                    "format": "int32"
                },
                "UpdatedAt": {
                    "type": "string",
                    "format": "string"
                },
                "UserId": {
                    "description": "用户ID",
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "models.Migrations": {
            "title": "Migrations",
            "type": "object",
            "properties": {
                "Batch": {
                    "type": "integer",
                    "format": "int64"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "Migration": {
                    "type": "string"
                }
            }
        },
        "models.Notice": {
            "title": "Notice",
            "type": "object",
            "properties": {
                "Content": {
                    "description": "公告内容",
                    "type": "string"
                },
                "CreatedAt": {
                    "type": "string",
                    "format": "string"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "KindergartenId": {
                    "description": "幼儿园ID",
                    "type": "integer",
                    "format": "int64"
                },
                "Title": {
                    "description": "标题",
                    "type": "string"
                },
                "UpdatedAt": {
                    "type": "string",
                    "format": "string"
                }
            }
        },
        "models.Organizational": {
            "title": "Organizational",
            "type": "object",
            "properties": {
                "ClassType": {
                    "description": "班级类型：1小班，2中班，3大班",
                    "type": "integer",
                    "format": "int32"
                },
                "CreatedAt": {
                    "description": "添加时间",
                    "type": "string",
                    "format": "string"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "IsFixed": {
                    "description": "是否固定的：0不是，1是",
                    "type": "integer",
                    "format": "int32"
                },
                "KindergartenId": {
                    "description": "幼儿园id",
                    "type": "integer",
                    "format": "int64"
                },
                "Level": {
                    "description": "等级",
                    "type": "integer",
                    "format": "int32"
                },
                "Name": {
                    "description": "组织架构名字",
                    "type": "string"
                },
                "ParentId": {
                    "description": "父级id",
                    "type": "integer",
                    "format": "int64"
                },
                "ParentIds": {
                    "description": "父级所有id",
                    "type": "string"
                },
                "Type": {
                    "description": "类型：0普通，1管理层，2年级组",
                    "type": "integer",
                    "format": "int32"
                },
                "UpdatedAt": {
                    "description": "修改时间",
                    "type": "string",
                    "format": "string"
                }
            }
        },
        "models.OrganizationalMember": {
            "title": "OrganizationalMember",
            "type": "object",
            "properties": {
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "IsPrincipal": {
                    "description": "是不是负责人：0不是，1是",
                    "type": "integer",
                    "format": "int32"
                },
                "MemberId": {
                    "type": "integer",
                    "format": "int64"
                },
                "OrganizationalId": {
                    "type": "integer",
                    "format": "int64"
                },
                "Type": {
                    "description": "类型：0教师，1学生",
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "models.Permission": {
            "title": "Permission",
            "type": "object",
            "properties": {
                "CreatedAt": {
                    "description": "创建时间",
                    "type": "string",
                    "format": "string"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "Identification": {
                    "description": "标识",
                    "type": "string"
                },
                "Level": {
                    "description": "等级",
                    "type": "integer",
                    "format": "int32"
                },
                "Name": {
                    "description": "名称",
                    "type": "string"
                },
                "ParentId": {
                    "description": "上一级ID",
                    "type": "integer",
                    "format": "int64"
                },
                "UpdatedAt": {
                    "description": "修改时间",
                    "type": "string",
                    "format": "string"
                }
            }
        },
        "models.PermissionRoute": {
            "title": "PermissionRoute",
            "type": "object",
            "properties": {
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "PermissionId": {
                    "type": "integer",
                    "format": "int64"
                },
                "RouteId": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "models.Role": {
            "title": "Role",
            "type": "object",
            "properties": {
                "CreatedAt": {
                    "type": "string",
                    "format": "string"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "Name": {
                    "description": "名称",
                    "type": "string"
                },
                "UpdatedAt": {
                    "type": "string",
                    "format": "string"
                }
            }
        },
        "models.RolePermission": {
            "title": "RolePermission",
            "type": "object",
            "properties": {
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "PermissionId": {
                    "type": "integer",
                    "format": "int64"
                },
                "RoleId": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "models.Route": {
            "title": "Route",
            "type": "object",
            "properties": {
                "CreatedAt": {
                    "type": "string",
                    "format": "string"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "Name": {
                    "description": "名称",
                    "type": "string"
                },
                "Route": {
                    "description": "路由",
                    "type": "string"
                },
                "UpdatedAt": {
                    "type": "string",
                    "format": "string"
                }
            }
        },
        "models.SlideShow": {
            "title": "SlideShow",
            "type": "object",
            "properties": {
                "Content": {
                    "description": "内容",
                    "type": "string"
                },
                "CreatedAt": {
                    "type": "string",
                    "format": "string"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "KindergartenId": {
                    "type": "integer",
                    "format": "int64"
                },
                "Picture": {
                    "description": "图片",
                    "type": "string"
                },
                "Title": {
                    "description": "标题",
                    "type": "string"
                },
                "UpdatedAt": {
                    "type": "string",
                    "format": "string"
                }
            }
        },
        "models.Student": {
            "title": "Student",
            "type": "object",
            "properties": {
                "Address": {
                    "description": "住址",
                    "type": "string"
                },
                "Age": {
                    "description": "年龄",
                    "type": "integer",
                    "format": "int32"
                },
                "Avatar": {
                    "description": "头像",
                    "type": "string"
                },
                "ClassInfo": {
                    "description": "所在班级",
                    "type": "string"
                },
                "CreatedAt": {
                    "type": "string",
                    "format": "string"
                },
                "DeletedAt": {
                    "type": "string",
                    "format": "string"
                },
                "HealthStatus": {
                    "description": "健康状况，多个以逗号隔开",
                    "type": "string"
                },
                "Hobby": {
                    "description": "兴趣爱好，多个以逗号隔开",
                    "type": "string"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "KindergartenId": {
                    "description": "幼儿园ID",
                    "type": "integer",
                    "format": "int64"
                },
                "Name": {
                    "description": "姓名",
                    "type": "string"
                },
                "NationOrReligion": {
                    "description": "民族或宗教",
                    "type": "string"
                },
                "NativePlace": {
                    "description": "籍贯",
                    "type": "string"
                },
                "Number": {
                    "description": "学号",
                    "type": "string"
                },
                "Phone": {
                    "description": "手机号",
                    "type": "string"
                },
                "Sex": {
                    "description": "性别 0男 1女",
                    "type": "integer",
                    "format": "int32"
                },
                "Status": {
                    "description": "状态 0未分班 1已分班 2离园",
                    "type": "integer",
                    "format": "int32"
                },
                "UpdatedAt": {
                    "type": "string",
                    "format": "string"
                },
                "UserId": {
                    "description": "用户ID",
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "models.StudentExamination": {
            "title": "StudentExamination",
            "type": "object",
            "properties": {
                "CreatedAt": {
                    "type": "string",
                    "format": "string"
                },
                "Height": {
                    "description": "身高",
                    "type": "number",
                    "format": "double"
                },
                "Id": {
                    "description": "体检编号",
                    "type": "integer",
                    "format": "int64"
                },
                "KindergartenId": {
                    "description": "幼儿园ID",
                    "type": "integer",
                    "format": "int64"
                },
                "Status": {
                    "description": "状态：0:正常，1:删除",
                    "type": "integer",
                    "format": "int32"
                },
                "StudentId": {
                    "description": "学生ID",
                    "type": "integer",
                    "format": "int64"
                },
                "UpdatedAt": {
                    "type": "string",
                    "format": "string"
                },
                "Userid": {
                    "description": "用户ID",
                    "type": "integer",
                    "format": "int64"
                },
                "Weight": {
                    "description": "体重",
                    "type": "number",
                    "format": "double"
                }
            }
        },
        "models.StudentKindergarten": {
            "title": "StudentKindergarten",
            "type": "object",
            "properties": {
                "ClassName": {
                    "description": "班级名称",
                    "type": "string"
                },
                "CreatedAt": {
                    "type": "string",
                    "format": "string"
                },
                "EnterGardenTime": {
                    "description": "入园时间",
                    "type": "string",
                    "format": "string"
                },
                "Height": {
                    "type": "number",
                    "format": "double"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "Identity": {
                    "type": "string"
                },
                "InKindergarten": {
                    "description": "目前是否在园",
                    "type": "string"
                },
                "IsExist": {
                    "description": "是否在系统内",
                    "type": "integer",
                    "format": "int32"
                },
                "KindergartenId": {
                    "description": "幼儿园ID",
                    "type": "integer",
                    "format": "int64"
                },
                "KindergartenName": {
                    "description": "幼儿园名称",
                    "type": "string"
                },
                "LeaveTime": {
                    "description": "离园时间",
                    "type": "string",
                    "format": "string"
                },
                "Status": {
                    "description": "状态：0:正常，1:删除",
                    "type": "integer",
                    "format": "int32"
                },
                "StudentId": {
                    "description": "学生ID",
                    "type": "integer",
                    "format": "int64"
                },
                "UpdatedAt": {
                    "type": "string",
                    "format": "string"
                },
                "Weight": {
                    "type": "number",
                    "format": "double"
                }
            }
        },
        "models.Teacher": {
            "title": "Teacher",
            "type": "object",
            "properties": {
                "Address": {
                    "description": "住址",
                    "type": "string"
                },
                "Age": {
                    "description": "年龄",
                    "type": "integer",
                    "format": "int32"
                },
                "Avatar": {
                    "description": "头像",
                    "type": "string"
                },
                "ClassInfo": {
                    "description": "班级信息",
                    "type": "string"
                },
                "CreatedAt": {
                    "type": "string",
                    "format": "string"
                },
                "DeletedAt": {
                    "type": "string",
                    "format": "string"
                },
                "EmergencyContact": {
                    "description": "紧急联系人",
                    "type": "string"
                },
                "EmergencyContactPhone": {
                    "description": "紧急联系人电话",
                    "type": "string"
                },
                "EnterGardenTime": {
                    "description": "进入本园时间",
                    "type": "string",
                    "format": "string"
                },
                "EnterJobTime": {
                    "description": "参加工作时间",
                    "type": "string",
                    "format": "string"
                },
                "Id": {
                    "description": "自增id",
                    "type": "integer",
                    "format": "int64"
                },
                "IdNumber": {
                    "description": "身份证号",
                    "type": "string"
                },
                "KindergartenId": {
                    "description": "幼儿园id",
                    "type": "integer",
                    "format": "int64"
                },
                "Name": {
                    "description": "姓名",
                    "type": "string"
                },
                "NationOrReligion": {
                    "description": "民族或宗教",
                    "type": "string"
                },
                "NativePlace": {
                    "description": "籍贯",
                    "type": "string"
                },
                "Number": {
                    "description": "教职工编号",
                    "type": "string"
                },
                "Phone": {
                    "description": "联系电话",
                    "type": "string"
                },
                "Post": {
                    "description": "职务",
                    "type": "string"
                },
                "Sex": {
                    "description": "性别 0男  1女",
                    "type": "integer",
                    "format": "int32"
                },
                "Source": {
                    "description": "来源",
                    "type": "string"
                },
                "Status": {
                    "description": "状态：0未分班，1已分班，2离职",
                    "type": "integer",
                    "format": "int32"
                },
                "TeacherCertificationNumber": {
                    "description": "教师资格认证编号",
                    "type": "string"
                },
                "TeacherCertificationStatus": {
                    "description": "教师资格证书状态，是否认证",
                    "type": "integer",
                    "format": "int32"
                },
                "UpdatedAt": {
                    "type": "string",
                    "format": "string"
                },
                "UserId": {
                    "description": "用户id",
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "models.TeacherTitle": {
            "title": "TeacherTitle",
            "type": "object",
            "properties": {
                "CreatedAt": {
                    "type": "string",
                    "format": "string"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "TeacherId": {
                    "description": "教师ID",
                    "type": "integer",
                    "format": "int64"
                },
                "Title": {
                    "description": "职称",
                    "type": "string"
                },
                "UpdatedAt": {
                    "type": "string",
                    "format": "string"
                }
            }
        },
        "models.TeachersShow": {
            "title": "TeachersShow",
            "type": "object",
            "properties": {
                "CreatedAt": {
                    "type": "string",
                    "format": "string"
                },
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "Introduction": {
                    "description": "介绍",
                    "type": "string"
                },
                "KindergartenId": {
                    "description": "幼儿园ID",
                    "type": "integer",
                    "format": "int64"
                },
                "TeacherId": {
                    "description": "教师ID",
                    "type": "integer",
                    "format": "int64"
                },
                "UpdatedAt": {
                    "type": "string",
                    "format": "string"
                }
            }
        },
        "models.UserPermission": {
            "title": "UserPermission",
            "type": "object",
            "properties": {
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "PermissionId": {
                    "type": "integer",
                    "format": "int64"
                },
                "UserId": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        },
        "models.UserRole": {
            "title": "UserRole",
            "type": "object",
            "properties": {
                "Id": {
                    "type": "integer",
                    "format": "int64"
                },
                "RoleId": {
                    "type": "integer",
                    "format": "int64"
                },
                "UserId": {
                    "type": "integer",
                    "format": "int64"
                }
            }
        }
    },
    "tags": [
        {
            "name": "facilities_display",
            "description": "FacilitiesDisplayController operations for FacilitiesDisplay\n"
        },
        {
            "name": "grade",
            "description": "GradeController operations for Grade\n"
        },
        {
            "name": "group_view",
            "description": "GroupViewController operations for GroupView\n"
        },
        {
            "name": "kindergarten",
            "description": "KindergartenController operations for Kindergarten\n"
        },
        {
            "name": "kindergarten_courseware",
            "description": "KindergartenCoursewareController operations for KindergartenCourseware\n"
        },
        {
            "name": "kindergarten_folder",
            "description": "KindergartenFolderController operations for KindergartenFolder\n"
        },
        {
            "name": "kindergarten_life",
            "description": "KindergartenLifeController operations for KindergartenLife\n"
        },
        {
            "name": "kinship",
            "description": "KinshipController operations for Kinship\n"
        },
        {
            "name": "life_picture",
            "description": "LifePictureController operations for LifePicture\n"
        },
        {
            "name": "member",
            "description": "MemberController operations for Member\n"
        },
        {
            "name": "migrations",
            "description": "MigrationsController operations for Migrations\n"
        },
        {
            "name": "notice",
            "description": "NoticeController operations for Notice\n"
        },
        {
            "name": "organizational",
            "description": "OrganizationalController operations for Organizational\n"
        },
        {
            "name": "organizational_member",
            "description": "OrganizationalMemberController operations for OrganizationalMember\n"
        },
        {
            "name": "permission",
            "description": "PermissionController operations for Permission\n"
        },
        {
            "name": "permission_route",
            "description": "PermissionRouteController operations for PermissionRoute\n"
        },
        {
            "name": "role",
            "description": "RoleController operations for Role\n"
        },
        {
            "name": "role_permission",
            "description": "RolePermissionController operations for RolePermission\n"
        },
        {
            "name": "route",
            "description": "RouteController operations for Route\n"
        },
        {
            "name": "slide_show",
            "description": "SlideShowController operations for SlideShow\n"
        },
        {
            "name": "student",
            "description": "StudentController operations for Student\n"
        },
        {
            "name": "student_ examination",
            "description": "StudentExaminationController operations for StudentExamination\n"
        },
        {
            "name": "student_kindergarten",
            "description": "StudentKindergartenController operations for StudentKindergarten\n"
        },
        {
            "name": "teacher",
            "description": "TeacherController operations for Teacher\n"
        },
        {
            "name": "teacher_title",
            "description": "TeacherTitleController operations for TeacherTitle\n"
        },
        {
            "name": "teachers_show",
            "description": "TeachersShowController operations for TeachersShow\n"
        },
        {
            "name": "user_permission",
            "description": "UserPermissionController operations for UserPermission\n"
        },
        {
            "name": "user_role",
            "description": "UserRoleController operations for UserRole\n"
        }
    ]
}